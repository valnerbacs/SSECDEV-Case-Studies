/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.SQLite;
import Model.Product;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import Model.User;
import Controller.SessionManager;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author beepxD
 */
public class MgmtProduct extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    
    public User user;
    
    public MgmtProduct(SQLite sqlite) {
        initComponents();
        this.sqlite = sqlite;
        
        TableColumnModel tcm = table.getColumnModel();
        tcm.removeColumn( tcm.getColumn(0) );
        
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

//        UNCOMMENT TO DISABLE BUTTONS
//        purchaseBtn.setVisible(false);
//        addBtn.setVisible(false);
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
        
       
    }
    
    

    public void init(){
        
        this.user = (User) SessionManager.getInstance().get("user");
        if(user != null){
            disableButtons();
        }
        
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<Product> products = sqlite.getProduct();
        for(int nCtr = 0; nCtr < products.size(); nCtr++){
            tableModel.addRow(new Object[]{
                products.get(nCtr).getId(),
                products.get(nCtr).getName(), 
                products.get(nCtr).getStock(), 
                products.get(nCtr).getPrice()});
        }
    }
    
    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        purchaseBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Stock", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(1).setMaxWidth(100);
            table.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        purchaseBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        purchaseBtn.setText("PURCHASE");
        purchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseBtnActionPerformed(evt);
            }
        });

        addBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.setToolTipText("");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(purchaseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents
   
    private void purchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            //Stock Field
            JTextField stockFld = new JTextField("0");
            designer(stockFld, "PRODUCT STOCK");
            String product = tableModel.getValueAt(table.getSelectedRow(), 1).toString();
            double price = Double.parseDouble(tableModel.getValueAt(table.getSelectedRow(), 3).toString());
            int ID = Integer.parseInt(tableModel.getValueAt(table.getSelectedRow(), 0).toString());
            
            Object[] message = {
                "Quantity of " + product, stockFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "PURCHASE PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
            
            if (result == JOptionPane.OK_OPTION) {
                if(!stockFld.getText().matches("[0-9]+")) JOptionPane.showMessageDialog(null, "Please enter a valid quantity.");
                else{
                    int qty = Integer.parseInt(stockFld.getText());
                    int rmn = Integer.parseInt(tableModel.getValueAt(table.getSelectedRow(), 2).toString());
                    if(qty > rmn) JOptionPane.showMessageDialog(null, "Apologies, but we are short on stock.");
                    else{
                        //Order changes Product details
                        sqlite.editProduct(product, rmn-qty, price, ID);
                        //Purchase is recorded in History
                        sqlite.addHistory(this.user.getUsername(), product, qty, sqlite.getCurrentTimeStamp());
                        //Purchase is recorded in Logs
                        sqlite.addLogs("PURCHASE", this.user.getUsername(), "Purchased " + qty + " of " + product, sqlite.getCurrentTimeStamp());
                        //Reload Products
                        tableModel.fireTableDataChanged();
                        this.init();
                    }
                }
            }
        }
    }//GEN-LAST:event_purchaseBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        JTextField nameFld = new JTextField();
        JTextField stockFld = new JTextField();
        JTextField priceFld = new JTextField();

        designer(nameFld, "PRODUCT NAME");
        designer(stockFld, "PRODUCT STOCK");
        designer(priceFld, "PRODUCT PRICE");

        Object[] message = {
            "Insert New Product Details:", nameFld, stockFld, priceFld
        };

        int result = JOptionPane.showConfirmDialog(null, message, "ADD PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

        if (result == JOptionPane.OK_OPTION) {
             if(isInputValid(nameFld.getText()) && isNumeric(stockFld.getText()) && isInputValid(stockFld.getText()) && isNumeric(priceFld.getText()) && isInputValid(priceFld.getText()) ){
                System.out.println(nameFld.getText());
                System.out.println(stockFld.getText());
                System.out.println(priceFld.getText());
                
                String addProductName = nameFld.getText();
                int addProductStock = Integer.parseInt(stockFld.getText());
                double addProductPrice = Float.parseFloat(priceFld.getText());
                
                sqlite.addProduct(addProductName, addProductStock, addProductPrice);
                sqlite.addLogs("ADD", this.user.getUsername(), "Added product " + addProductName + " successfully", sqlite.getCurrentTimeStamp());
                this.init();
            } else JOptionPane.showMessageDialog(null, "Invalid input detected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            JTextField nameFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 1) + "");
            JTextField stockFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 2) + "");
            JTextField priceFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 3) + "");

            designer(nameFld, "PRODUCT NAME");
            designer(stockFld, "PRODUCT STOCK");
            designer(priceFld, "PRODUCT PRICE");

            Object[] message = {
                "Edit Product Details:", nameFld, stockFld, priceFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "EDIT PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                if(isInputValid(nameFld.getText()) && isNumeric(stockFld.getText()) && isInputValid(stockFld.getText()) && isNumeric(priceFld.getText()) && isInputValid(priceFld.getText())){
                    int id = (Integer) tableModel.getValueAt(table.getSelectedRow(), 0);
                    System.out.println(nameFld.getText());
                    System.out.println(stockFld.getText());
                    System.out.println(priceFld.getText());
                
                    
                    String newProductName = nameFld.getText();
                    int newProductStock = Integer.parseInt(stockFld.getText());
                    double newProductPrice = Float.parseFloat(priceFld.getText());
                    sqlite.editProduct(newProductName, newProductStock, 
                            newProductPrice,  id);
                    sqlite.addLogs("EDIT", this.user.getUsername(), "Updated product " + newProductName + " information successfully", sqlite.getCurrentTimeStamp());
                    this.init();
                } else JOptionPane.showMessageDialog(null, "Invalid input detected.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    //for sanitation
    private boolean isInputValid(String txt) {
        return !(txt.contains("select ") || txt.contains("insert ") ||
                txt.contains("delete ") || txt.contains("update ") || txt.contains("create ") ||
                txt.contains("drop ") || txt.contains("alter ") || txt.contains("truncate ") ||
                txt.contains("merge ") || txt.contains("grant ") || txt.contains("revoke ") ||
                txt.contains("commit ") || txt.contains("union ") || txt.contains("post ") ||
                txt.contains("=") || txt.contains(";--") || txt.contains("\" or") ||
                txt.contains("\' or") || txt.contains("char%") || txt.contains("&quot") ||
                txt.contains("&apos") || txt.contains("\" or \"\"=\"") || txt.contains("'") || txt.contains("<") || txt.contains(">") ||
                txt.contains("\""));
    }

    private boolean isNumeric(String str) {
        return str.matches("\\d+(\\.\\d+)?");
    }

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + tableModel.getValueAt(table.getSelectedRow(), 1) + "?", "DELETE PRODUCT", JOptionPane.YES_NO_OPTION);
            
            int id = (Integer) tableModel.getValueAt(table.getSelectedRow(), 0);
            if (result == JOptionPane.YES_OPTION) {
                System.out.println(tableModel.getValueAt(table.getSelectedRow(), 0));
                sqlite.addLogs("DELETE", this.user.getUsername(), "Deleted product " + tableModel.getValueAt(table.getSelectedRow(),1).toString() + " successfully", sqlite.getCurrentTimeStamp());
                sqlite.deleteProduct(id);
                this.init();
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void disableButtons()   {
        int userRole = user.getRole();
        switch (userRole)    {
            case 1:
                addBtn.setVisible(false);
                editBtn.setVisible(false);
                deleteBtn.setVisible(false);
                break;
         
            case 2: // client
                addBtn.setVisible(false);
                editBtn.setVisible(false);
                deleteBtn.setVisible(false);
                break;
            
            case 3: // staff
                purchaseBtn.setVisible(false);
                break;
                
            case 4: //manager
                purchaseBtn.setVisible(false);
                break;
                
//            case 5: // admin
//                
//                break;
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton purchaseBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
